<?xml version="1.0" encoding="utf-8"?>
<!--

Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the "License"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

-->


<!---
The default skin class for the Spark VideoPlayer component.  

@see spark.components.VideoPlayer

@langversion 3.0
@playerversion Flash 10
@playerversion AIR 1.5
@productversion Flex 4
-->
<s:SparkSkin xmlns:fx="http://ns.adobe.com/mxml/2009"
			 xmlns:s="library://ns.adobe.com/flex/spark"
			 xmlns:fb="http://ns.adobe.com/flashbuilder/2009"
			 alpha.disabledStates="0.5">
	<!-- A chrome color of 0xCCCCCC in the fullScreenStates means we ignore the chromeColor property 
	all together as 0xCCCCCC is essentially just a no-op color transform -->
	
	<!-- host component -->
	<fx:Metadata>
		/** 
		 * @copy spark.skins.spark.ApplicationSkin#hostComponent
		 */
		[HostComponent("spark.components.VideoPlayer")]
	</fx:Metadata>
	
	<fx:Script fb:purpose="styling">
		<![CDATA[
			
			/**
			 * @private
			 */
			override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number):void
			{
				dropShadow.visible = getStyle("dropShadowVisible");
				
				super.updateDisplayList(unscaledWidth, unscaledHeight);
			}
			
		]]>
		
	</fx:Script>
	
	<!-- states -->
	<s:states>
		<s:State name="uninitialized" stateGroups="uninitializedStates, normalStates" />
		<s:State name="loading" stateGroups="loadingStates, normalStates" />
		<s:State name="ready" stateGroups="readyStates, normalStates" />
		<s:State name="playing" stateGroups="playingStates, normalStates" />
		<s:State name="paused" stateGroups="pausedStates, normalStates" />
		<s:State name="buffering" stateGroups="bufferingStates, normalStates" />
		<s:State name="playbackError" stateGroups="playbackErrorStates, normalStates" />
		<s:State name="disabled" stateGroups="disabledStates, normalStates"/>
		<s:State name="uninitializedAndFullScreen" stateGroups="uninitializedStates, fullScreenStates" />
		<s:State name="loadingAndFullScreen" stateGroups="loadingStates, fullScreenStates" />
		<s:State name="readyAndFullScreen" stateGroups="readyStates, fullScreenStates" />
		<s:State name="playingAndFullScreen" stateGroups="playingStates, fullScreenStates" />
		<s:State name="pausedAndFullScreen" stateGroups="pausedStates, fullScreenStates" />
		<s:State name="bufferingAndFullScreen" stateGroups="bufferingStates, fullScreenStates" />
		<s:State name="playbackErrorAndFullScreen" stateGroups="playbackErrorStates, fullScreenStates" />
		<s:State name="disabledAndFullScreen" stateGroups="disabledStates, fullScreenStates"/>
	</s:states>
	
	<!-- drop shadow -->
	<!--- @private -->
	<s:RectangularDropShadow id="dropShadow" blurX="17" blurY="17"
							 alpha="0.32" distance="4" 
							 angle="90" color="#131313"
							 width="100%" height="100%"
							 excludeFrom="fullScreenStates"/>
	
	<!--- Video and player controls are clipped if they exceed the size of the 
	component, but the drop shadow above is not clipped and sizes to the component.
	We also set verticalScrollPosition so that when we do clip, rather than clipping  
	off the bottom first, we clip off the top fist.  This is so the player controls 
	are still visible when we start clipping. -->
	<s:Group id="clippedGroup"
			 clipAndEnableScrolling="true"
			 width="100%" height="100%"
			 verticalScrollPosition="{Math.max(0, 184 - clippedGroup.height)}">
		
		<!-- There's a minimum size for the video and controls.  If we go below that
		we are clipped. -->
		<s:Group minWidth="263" minHeight="184" left="0" right="0" top="0" bottom="0">
			
			<!-- background when the videoDisplay doesn't fill its whole spot -->
			<s:Rect bottom="1" left="1" right="1" top="1">
				<s:fill>
					<s:SolidColor color="0x000000" />
				</s:fill>
			</s:Rect>
			
			<!--- @copy spark.components.VideoPlayer#videoDisplay -->
			<s:VideoDisplay id="videoDisplay" bottom="1" left="1" right="1" top="1" 
							bottom.fullScreenStates="0" left.fullScreenStates="0" 
							right.fullScreenStates="0" top.fullScreenStates="0" />
			
			<!--- @copy spark.components.VideoPlayer#playPauseButton -->
			<s:ToggleButton id="playPauseButton" width="100%" height="100%"
							horizontalCenter="0" verticalCenter="0"
							skinClass="multipublish.skins.VideoPlayerPlayPauseButton"/>
			
			<!--- @copy spark.components.VideoPlayer#scrubBar -->
			<s:ScrubBar id="scrubBar" left="10" right="10" bottom="2" liveDragging="true"
						skinClass="multipublish.skins.VideoPlayerScruBarSkin"/>
			
		</s:Group>
	</s:Group>
</s:SparkSkin>
