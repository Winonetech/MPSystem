<?xml version="1.0" encoding="utf-8"?>
<ct:ContentView xmlns:fx="http://ns.adobe.com/mxml/2009" 
				xmlns:s ="library://ns.adobe.com/flex/spark" 
				xmlns:mx="library://ns.adobe.com/flex/mx" 
				xmlns:ct="multipublish.views.contents.*">
	
	<s:Group horizontalCenter="0" verticalCenter="0"
			 width="{scaledWidth}" height="{scaledHeight}"
			 clipAndEnableScrolling="true">
		
		<s:SWFLoader id="loader" width="100%" height="100%"
					 verticalAlign="middle" horizontalAlign="center"
					 scaleContent="true" autoLoad="false"
					 maintainAspectRatio="true"
					 smoothBitmapContent="true"/>
		
	</s:Group>
	
	<fx:Script>
		<![CDATA[
			
			import cn.vision.utils.MathUtil;
			
			import multipublish.consts.ContentConsts;
			import multipublish.core.mp;
			import multipublish.vo.contents.Cartoon;
			
			
			/**
			 * @inheritDoc
			 */
			
			override protected function createChildren():void
			{
				super.createChildren();
				
				timer = new Timer(1000);
			}
			
			
			/**
			 * @inheritDoc
			 */
			
			override protected function processPlay():void
			{
				super.processPlay();
				
				loaderPlay();
			}
			
			
			/**
			 * @inheritDoc
			 */
			
			override protected function processStop():void
			{
				timerStop();
				movieStop();
				loaderStop();
			}
			
			
			/**
			 * @inheritDoc
			 */
			
			override protected function processReset():void
			{
				super.processReset();
				
				movie = null;
			}
			
			
			/**
			 * @inheritDoc
			 */
			
			override protected function resolveData():void
			{
				super.resolveData();
				
				if (data)
					time = (data as Cartoon).duration;
				else
					dispatchReady();
			}
			
			
			/**
			 * @private
			 */
			private function analyzeContent():void
			{
				var cw:Number = loader.content.loaderInfo.width;
				var ch:Number = loader.content.loaderInfo.height;
				var pw:Number = width;
				var ph:Number = height;
				var cs:Number =(cw / ch < pw / ph) ? ph / ch : pw / cw;
				scaledWidth  = cs * cw;
				scaledHeight = cs * ch;
				
				movie = loader.content as MovieClip;
				
				movie && movie.totalFrames ? moviePlay() : timerPlay();
			}
			
			/**
			 * @private
			 */
			private function loaderPlay():void
			{
				if (loader && content)
				{
					loader.addEventListener(Event.COMPLETE, handlerDefault);
					loader.addEventListener(IOErrorEvent.IO_ERROR, handlerDefault);
					loader.load((content as Cartoon).content);
				}
			}
			
			/**
			 * @private
			 */
			private function loaderStop():void
			{
				if (loader) loader.unloadAndStop(true);
			}
			
			/**
			 * @private
			 */
			private function moviePlay():void
			{
				movie.addEventListener(Event.ENTER_FRAME, handlerEnterFrame);
				movie.play();
				
				timerPlay(false);
			}
			
			/**
			 * @private
			 */
			private function movieStop():void
			{
				if (movie) 
				{
					movie.removeEventListener(Event.ENTER_FRAME, handlerEnterFrame);
					movie.stop();
					movie = null;
				}
			}
			
			/**
			 * @private
			 */
			private function timerPlay($check:Boolean = true):void
			{
				if ($check) time = time || ContentConsts.CONTENT_TIME_DEFAUALT;
				if (time)
				{
					timer.addEventListener(TimerEvent.TIMER_COMPLETE, handlerTimerComplete);
					
					timer.reset();
					timer.start();
				}
			}
			
			/**
			 * @private
			 */
			private function timerStop():void
			{
				if (timer) 
				{
					timer.removeEventListener(TimerEvent.TIMER_COMPLETE, handlerTimerComplete);
					timer.stop();
				}
			}
			
			
			/**
			 * @private
			 */
			private function handlerDefault($e:Event):void
			{
				loader.removeEventListener(Event.COMPLETE, handlerDefault);
				loader.removeEventListener(IOErrorEvent.IO_ERROR, handlerDefault);
				
				$e.type == Event.COMPLETE ? analyzeContent() : timerPlay();
				
				dispatchReady();
			}
			
			/**
			 * @private
			 */
			private function handlerEnterFrame($e:Event):void
			{
				if (movie.currentFrame == movie.totalFrames) stop();
			}
			
			/**
			 * @private
			 */
			private function handlerTimerComplete($e:TimerEvent):void
			{
				stop();
			}
			
			
			/**
			 * 
			 * 文件播放时间。
			 * 
			 */
			
			public function get time():uint
			{
				return mp::time;
			}
			
			/**
			 * @private
			 */
			public function set time($value:uint):void
			{
				mp::time = MathUtil.clamp($value, 0, config.maxDurationTime);
				
				applyCallback(callbackTime);
			}
			
			/**
			 * @private
			 */
			private function callbackTime():Boolean
			{
				var result:Boolean = Boolean(timer);
				if (result) 
				{
					timer.repeatCount = time;
					if (timer.running)
					{
						timer.reset();
						timer.start();
					}
				}
				return result;
			}
			
			
			/**
			 * @private
			 */
			private var timer:Timer;
			
			/**
			 * @private
			 */
			private var movie:MovieClip;
			
			
			/**
			 * @private
			 */
			[Bindable]
			private var scaledWidth:Number = 0;
			
			/**
			 * @private
			 */
			[Bindable]
			private var scaledHeight:Number = 0;
			
			
			/**
			 * @private
			 */
			mp var time:uint;
			
		]]>
	</fx:Script>
</ct:ContentView>
