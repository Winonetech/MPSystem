<?xml version="1.0" encoding="utf-8"?>
<dc:DocumentView xmlns:fx="http://ns.adobe.com/mxml/2009" 
				 xmlns:s ="library://ns.adobe.com/flex/spark" 
				 xmlns:mx="library://ns.adobe.com/flex/mx" 
				 xmlns:dc="multipublish.views.documents.*">
	<s:SWFLoader id="loader" width="100%" height="100%" autoLoad="false"
				 verticalAlign="middle" horizontalAlign="center"
				 scaleContent="true" maintainAspectRatio="true"
				 smoothBitmapContent="true" mask="{cover}"/>
	<s:Graphic id="cover" width="{scaledWidth}" height="{scaledHeight}"
			   horizontalCenter="0" verticalCenter="0">
		<s:Rect width="{scaledWidth}" height="{scaledHeight}">
			<s:fill>
				<s:SolidColor color="0"/>
			</s:fill>
		</s:Rect>
	</s:Graphic>
	<s:Image id="image" width="100%" height="100%"
			 source="{swfct.thumbnail}"
			 fillMode="scale" scaleMode="zoom"
			 hideEffect="{fade}"/>
	<fx:Declarations>
		<s:Fade id="fade" duration="500" alphaFrom="1" alphaTo="0"/>
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
			
			import multipublish.vo.documents.FlashDocument;
			
			
			/**
			 * @inheritDoc
			 */
			
			override protected function processPlay():void
			{
				super.processPlay();
				
				movieEnd = timerEnd = false;
				
				if (loader && swfct)
				{
					loader.addEventListener(Event.COMPLETE, handlerDefault);
					loader.addEventListener(IOErrorEvent.IO_ERROR, handlerDefault);
					loader.load(swfct.path);
				}
			}
			
			
			/**
			 * @inheritDoc
			 */
			
			override protected function processStop():void
			{
				if (movie) 
				{
					movie.removeEventListener(Event.ENTER_FRAME, handlerEnterFrame);
					movie.stop();
				}
				if (loader) loader.unloadAndStop(true);
			}
			
			
			/**
			 * @inheritDoc
			 */
			
			override protected function processReset():void
			{
				super.processReset();
				
				movie = null;
			}
			
			
			/**
			 * @inheritDoc
			 */
			
			override protected function resolveData():void
			{
				super.resolveData();
				
				swfct = data as FlashDocument;
				time = swfct.time;
			}
			
			
			/**
			 * @inheritDoc
			 */
			
			override protected function completeTime():void
			{
				timerEnd = true;
				completeCheck();
			}
			
			
			/**
			 * @private
			 */
			private function analyzeContent():void
			{
				if (loader.content is MovieClip)
				{
					movie = loader.content as MovieClip;
					movie.addEventListener(Event.ENTER_FRAME, handlerEnterFrame);
					var mtime:uint = movie.totalFrames / config.stage.frameRate;
					time = Math.min(mtime, time);
					movie.play();
				}
				else
				{
					movieEnd = true;
				}
				
				var cw:Number = loader.content.loaderInfo.width;
				var ch:Number = loader.content.loaderInfo.height;
				var pw:Number = width;
				var ph:Number = height;
				var cs:Number =(cw / ch < pw / ph) ? ph / ch : pw / cw;
				scaledWidth  = cs * cw;
				scaledHeight = cs * ch;
			}
			
			/**
			 * @private
			 */
			private function completeCheck():void
			{
				if (!loop && movieEnd && timerEnd) stop();
			}
			
			
			/**
			 * @private
			 */
			private function handlerEnterFrame($e:Event):void
			{
				if (movie.currentFrame == movie.totalFrames)
				{
					movie.removeEventListener(Event.ENTER_FRAME, handlerEnterFrame);
					if(!loop)movie.stop();
					movieEnd = true;
					completeCheck();
				}
			}
			
			/**
			 * @private
			 */
			private function handlerDefault($e:Event):void
			{
				loader.removeEventListener(Event.COMPLETE, handlerDefault);
				loader.removeEventListener(IOErrorEvent.IO_ERROR, handlerDefault);
				if ($e.type == Event.COMPLETE)
				{
					if (image) image.visible = false;
					
					analyzeContent();
				}
				else
				{
					stop();
				}
			}
			
			
			/**
			 * @private
			 */
			[Bindable]
			private var swfct:FlashDocument;
			
			/**
			 * @private
			 */
			private var movie:MovieClip;
			
			/**
			 * @private
			 */
			private var movieEnd:Boolean;
			
			/**
			 * @private
			 */
			private var timerEnd:Boolean;
			
			/**
			 * @private
			 */
			[Bindable]
			private var scaledWidth:Number = 0;
			
			/**
			 * @private
			 */
			[Bindable]
			private var scaledHeight:Number = 0;
			
		]]>
	</fx:Script>
</dc:DocumentView>
