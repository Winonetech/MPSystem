<?xml version="1.0" encoding="utf-8"?>
<vw:MPView xmlns:fx="http://ns.adobe.com/mxml/2009"
		   xmlns:s ="library://ns.adobe.com/flex/spark"
		   xmlns:mx="library://ns.adobe.com/flex/mx"
		   xmlns:vw="multipublish.views.*"
		   xmlns:cp="com.winonetech.components.progress.*"
		   xmlns:tp="multipublish.components.*">
	
	<vw:states>
		<s:State name="loading"/>
		<s:State name="display"/>
	</vw:states>
	
	<s:Rect width="100%" height="100%" includeIn="loading">
		<s:stroke>
			<s:SolidColorStroke color="0xCCCCCC"/>
		</s:stroke>
		<s:fill>
			<s:SolidColor color="0xFFFFFF" alpha=".4"/>
		</s:fill>
	</s:Rect>
	
	<cp:ProgressView id="progress" includeIn="loading" data="{data.caches}"
					 maxWidth="{width}" maxHeight="{height}"
					 horizontalCenter="0" verticalCenter="0"/>
	
	<s:Group id="container" includeIn="display"/>
	
	<fx:Metadata>
		[Event(name="ready", type="com.winonetech.events.ControlEvent")]
	</fx:Metadata>
	
	<fx:Script>
		<![CDATA[
			
			import cn.vision.utils.ClassUtil;
			
			import com.winonetech.core.View;
			import com.winonetech.events.ControlEvent;
			
			import multipublish.consts.MPTipConsts;
			import multipublish.core.mp;
			
			import spark.components.Image;
			
			
			/**
			 * @inheritDoc
			 */
			
			override protected function processPlay():void
			{
				if (data)
				{
					if (data.ready)
					{
						view && view.play();
					}
					else
					{
						if (progress)
						{
							log(MPTipConsts.RECORD_CACHE_NEED, data);
							progress.play();
						}
					}
				}
				/* if (containsElement(preview)) removeElement(preview);
				interactable = true; */
			}
			
			
			/**
			 * @inheritDoc
			 */
			
			override protected function processStop():void
			{
				if (data)
				{
					data.ready
						? (view && view.stop(false, stopRect, stopForce))
						: (progress && progress.stop());
				}
				
				/* preview.source = BitmapUtil.draw(this, width, height, true, 0, null, null, null, null, true);
				preview.smooth = true;
				addElement(preview);
				interactable = false; */
			}
			
			
			/**
			 * @inheritDoc
			 */
			
			override protected function processReset():void
			{
				if (data)
				{
					data.removeEventListener(ControlEvent.READY, handlerDataReady);
					data.removeEventListener(ControlEvent.PROGRESS, handlerProgress);
					data.removeEventListener(ControlEvent.ERROR, handlerProgress);
					data.removeEventListener(ControlEvent.DOWNLOAD, handlerDownload);
					data = null;
				}
				if (view)
				{
					view.removeEventListener(ControlEvent.READY, handlerViewReady);
					view.removeEventListener(ControlEvent.PLAY, handlerPlay);
					view.removeEventListener(ControlEvent.STOP, handlerStop);
					view.reset();
					view = null;
				}
				if (containsElement(preview)) removeElement(preview);
				preview = null;
			}
			
			
			/**
			 * @inheritDoc
			 */
			
			override protected function processResume():void
			{
				if (view) view.resume();
			}
			
			
			/**
			 * @inheritDoc
			 */
			
			override protected function resolveData():void
			{
				applyCallback(callbackData);
			}
			
			
			/**
			 * @private
			 */
			private function prepareView():void
			{
				if (ClassUtil.validateSubclass(refer, MPView))
				{
					container.addElement(view = new refer);
					view.addEventListener(ControlEvent.READY, handlerViewReady);
					view.addEventListener(ControlEvent.PLAY, handlerPlay);
					view.addEventListener(ControlEvent.STOP, handlerStop);
					view.width  = width;
					view.height = height;
					view.data   = data;
					view.horizontalCenter = 0;
					view.verticalCenter = 0;
					playing && processPlay();
					
					dispatchReady();
				}
			}
			
			
			/**
			 * @private
			 */
			private function callbackData():Boolean
			{
				var result:Boolean = data && progress;
				
				if (result) 
				{
					data.update();
					var ready:Boolean = data.ready;
					currentState = ready ? "display" : "loading";
					if (ready)
					{
						prepareView();
					}
					else
					{
						if (data.tip)
						{
							progress.title = data.tip.title;
							progress.message = data.tip.message;
						}
						data.addEventListener(ControlEvent.READY, handlerDataReady);
						data.addEventListener(ControlEvent.PROGRESS, handlerProgress);
						data.addEventListener(ControlEvent.ERROR, handlerProgress);
						data.addEventListener(ControlEvent.DOWNLOAD, handlerDownload);
						
						dispatchReady();
					}
					
					playing && processPlay();
				}
				return result;
			}
			
			
			/**
			 * @private
			 */
			private function handlerPlay($e:ControlEvent):void
			{
				play();
			}
			
			/**
			 * @private
			 */
			private function handlerStop($e:ControlEvent):void
			{
				stop();
			}
			
			/**
			 * @private
			 */
			private function handlerViewReady($e:ControlEvent):void
			{
				dispatchReady();
			}
			
			/**
			 * @private
			 */
			private function handlerDataReady($e:ControlEvent):void
			{
				data.removeEventListener(ControlEvent.READY, handlerDataReady);
				if (stage)
				{
					log(MPTipConsts.RECORD_CACHE_COMP, data);
					
					currentState = "display";
					prepareView();
				}
			}
			
			/**
			 * @private
			 */
			private function handlerProgress($e:ControlEvent):void
			{
				if (progress && currentState == "loading")
				{
					if ($e.type == ControlEvent.ERROR)
						progress.title = "错误：";
					else if ($e.type == ControlEvent.PROGRESS)
						progress.title = "提示：";
					
					progress.message = $e.message;
				}
			}
			
			/**
			 * @private
			 */
			private function handlerDownload($e:ControlEvent):void
			{
				currentState = "loading";
				if (progress) progress.play();
			}
			
			
			/**
			 * 
			 * 相关的视图。
			 * 
			 */
			
			public function get refer():Class
			{
				return mp::refer;
			}
			
			/**
			 * @private
			 */
			public function set refer($value:Class):void
			{
				if ($value!= refer && 
					ClassUtil.validateSubclass($value, View))
				{
					mp::refer = $value;
				}
			}
			
			
			/**
			 * 
			 * 历史ID。
			 * 
			 */
			
			public var historyID:uint;
			
			
			/**
			 * 
			 * 是否为全屏。
			 * 
			 */
			
			public var fullscreen:Boolean;
			
			
			/**
			 * 
			 * 是否为全屏。
			 * 
			 */
			
			[Bindable]
			public var interactable:Boolean = true;
			
			
			/**
			 * @private
			 */
			public var view:MPView;
			
			/**
			 * @private
			 */
			private var created:Boolean;
			
			/**
			 * @private
			 */
			private var preview:Image = new Image;
			
			
			/**
			 * @private
			 */
			mp var refer:Class;
			
			/**
			 * @private
			 */
			mp var button:*;
			
		]]>
	</fx:Script>
</vw:MPView>